1.mysql命令:
	数据库:
	- 登录数据库:mysql -uroot -p960911;
	- 创建数据库:create database xiaonian;
	- 查看数据库:show databases;
	- 使用数据库:use xiaonian;
	- 删除数据库:drop database xiaonian;
	- 查看使用的是哪一个数据库: select database();
	- 查看数据库版本号:select version();
	- 结束一条语句: \c
	- 退出数据库: exit
	表:
	- 查看表结构:desc emp;
	- 查看建表语句:show create table emp;
	- 删除表:

2.sql语句:
	基础查询
	1.查询员工年薪: 
		select ename,sal*12 from emp;
		查询结果字段可以进行数学运算
	
	2.给查询字段改名: 
		select ename,sal*12 as yearsal from emp;
		as关键字可以省略
	
	3.别名有中文: 
		select ename,sal*12 as '年薪' from emp;
		标准sql语句中要求字符串使用''括起来
	
	4.*效率较低,在实际开发中一般不使用


	条件查询
	5.查询工资等于5000的员工姓名？
		select ename,sal from emp where sal = 5000;
	
	6.查询SMITH的工资？
		select ename,sal from emp where ename = 'SMITH';
		字符串使用''括起来
	
	7.找出工资高于3000的员工？
		select ename,sal from emp where sal > 3000;
	
	8.找出工资不等于3000的员工?
	
	9.找出工资在1100和3000之间的员工，包括1100和3000？
		select ename,sal from emp where sal >= 1100 and sal <= 3000;
		select ename,sal from emp where sal between 1100 and 3000;
		between..and.. 是闭区间,必须左小右大
		and 关键字:表示并且
	
	10.找出哪些人津贴为NULL？
		错误: select ename,comm from emp where comm = null;
		正确:select ename,comm from emp where comm is null;
		在数据库当中NULL不是一个值，代表什么也没有，为空。
		空不是一个值，不能用等号衡量。
		必须使用 is null或者is not null
	
	11.找出哪些人津贴不为NULL？
		select ename,comm from emp where comm is not null;
	
	12.找出哪些人没有津贴,包括null和0;
		select ename,comm from emp where comm is null or comm = 0;
		or 关键字:表示或者
		
	13.找出工作岗位是MANAGER和SALESMAN的员工？
		select ename,job from emp where job = 'MANAGER' or job = 'SALESMAN';
	
	14.and和or联合起来用：找出薪资大于1000的并且部门编号是20或30部门的员工?
		select ename,sal,deptno from emp where sal > 1000 and (deptno = 20 or deptno = 30)
		当优先级不确定时,加小括号
	
	15.找出工作岗位是MANAGER和SALESMAN的员工？
		select ename,job from emp where job in('MANAGER','SALESMAN');
		in(,):等同于or,在这几个值当中
		ont in(,):不在这几个值当中
	
	like模糊查询
	16.%代表任意多个字符，_代表任意1个字符。
	
	17.找出名字当中含有O的？
		select ename from emp where ename like '%o%';
	
	18.找出名字中第二个字母是A的？
		select ename from emp where ename like '_a%';
	
	19.找出名字中有下划线的？
		select ename from emp where ename like '%\_%'
		使用转义字符"\"
	
	排序
	20.按照工资升序，找出员工名和薪资？
		select ename,sal from emp order by sal;
	
	21.默认是升序。怎么指定升序或者降序呢？asc表示升序，desc表示降序。
	
	22.按照工资的降序排列，当工资相同的时候再按照名字的升序排列。
		 select ename,sal from emp order by sal desc ,ename asc;
		 越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。
	
	23.找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列?
		 select ename,job,sal from emp where job = 'SALESMAN' order by sal desc;


	24.代码执行顺序:
			select 
				字段						3
			from
				表名						1
			where
				条件						2
			order by
				....						4
			
			order by是最后执行的。
	
	分组函数
	25.
		计数: count()
		求和: sum()
		平均值: avg()
		最大值: max()
		最小值: min()
		
		记住：所有的分组函数都是对“某一组(一个字段)”数据进行操作的。
	
	26.找出工资总和,最高,最低,平均值,总人数
		select sum(sal) from emp;
		select max(sal) from emp;
		select min(sal) from emp;
		select avg(sal) from emp;
		select count(sal) from emp;
	
	27.分组函数还有另一个名字：多行处理函数。
	多行处理函数的特点：输入多行，最终输出的结果是1行。
	分组函数自动忽略NULL。
	
	28.找出工资高于平均工资的员工？
		select ename,sal from emp where sal > (select avg(sal) from emp);
	
	29.计算每个员工的年薪？
		错误:select ename,(sal+comm)*12 as yearsal from emp;
		重点：所有数据库都是这样规定的，只要有NULL参与的运算结果一定是NULL。
	
		正确:select ename,(sal+ifnull(comm,0))*12 '年薪' from emp;
	
	group by 和 having
	30.group by ： 按照某个字段或者某些字段进行分组。
	   having : having是对分组之后的数据进行再次过滤。
	
	31.找出每个工作岗位的最高薪资。
		select job,max(sal) from emp group by job;
	
	32.注意：分组函数一般都会和group by联合使用，这也是为什么它被称为分组函数的原因。
	   并且任何一个分组函数（count sum avg max min）都是在group by语句执行结束之后才会执行的。
	   当一条sql语句没有group by的话，整张表的数据会自成一组。
	
	33.记住一个规则：当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。
	
	34.每个工作岗位的平均薪资？
		select job,avg(sal) from emp group by job;
		
	35.多个字段能不能联合起来一块分组？ 找出每个部门不同工作岗位的最高薪资。
		select deptno,job,max(sal) from emp group by deptno,job;
	
	36.找出每个部门的最高薪资，要求显示薪资大于2900的数据。
		select job,max(sal) from emp where sal > 2900 group by job;
		select job,max(sal) from emp group by job having max(sal) > 2900 ;
		分组函数效率较低,能不使用则不使用
			
	37.找出每个部门的平均薪资，要求显示薪资大于2000的数据。
		select deptno,avg(sal) from emp group by deptno having avg(sal) > 2000;
	
	38.where后面不能使用分组函数.
	
	39.总结一个完整的DQL语句怎么写？
	
		select		5
			..
		from			1	
			..
		where			2
			..
		group by		3
			..
		having		4
			..
		order by		6
			..
	
	查询结果去重:distinct

?	



